# -*- coding: utf-8 -*-
"""Monte Carlo Simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J_9FNPKmruKU0DUphAfZcdWBGrO8WVxO

Trial on Category62
"""

import numpy as np
import pandas as pd

!gdown 1TdUywNbAevQvWef6zuDlJuqG-xL5cHJS

df = pd.read_csv('Cat62data_train.csv')

del df['Unnamed: 0']
df

df.plot(figsize=(8,5))

import random

random_numbers = random.sample(range(108), 12)
random_numbers

df_copy = df.copy()

for i in random_numbers:
  df_copy['y'].iloc[i] = np.nan

df_copy

num_simulations = 100
def monte_carlo_imputation(data):
    imputed_data = data.copy()

    # Iterate over each column in the DataFrame
    for col in imputed_data.columns:
        # Get the indices of missing values in the column
        missing_indices = imputed_data[col].index[imputed_data[col].isnull()]

        # Iterate over each missing value index
        for index in missing_indices:
            # Perform Monte Carlo simulation
            simulations = np.random.choice(imputed_data[col].dropna(), size=num_simulations)
            imputed_data.loc[index, col] = np.mean(simulations)

    return imputed_data

imputed_df = monte_carlo_imputation(df_copy)

print(imputed_df)

imputed_df

imputed_df.plot(figsize=(8,5))

sum = 0
for i in random_numbers:
  sum += ((df['y'].iloc[i] - imputed_df['y'].iloc[i])/df['y'].iloc[i])**2

sum /= 12
mspe = sum*100
mspe